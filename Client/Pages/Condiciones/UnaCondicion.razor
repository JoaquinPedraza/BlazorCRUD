@page "/Condicion"
@page "/Condicion/{Id:int}"
@using BlazorCRUD.Server.Models;
@inject ICondicionServices CondicionServices
@inject NavigationManager NavigationManager

<h3>UnaCondicion</h3>
@if (Id == null)
{
    <PageTitle>Create a new Condicion</PageTitle>
    <h3>Create a new Condicion</h3>
}
else
{
    <PageTitle>Edit @condicion.IdCondicion </PageTitle>
    <h3>Edit @condicion.IdCondicion</h3>
}

<EditForm Model="condicion" OnSubmit="HandleSubmit">

    <div>
        <label for="desc_condicion">Descripcion de la Condicion</label>
        <InputText id="desc_condicion" @bind-Value="condicion.DescCondicion" class="form-control"></InputText>
    </div>
    <br />

    @if (Id == null)
    {
        <button type="submit" class="btn btn-primary">Save New Condicion</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Update Condicion</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteCondicion">Delete Condicion</button>
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    Condicion condicion = new Condicion{};

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            condicion = await CondicionServices.GetCondicion((byte)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await CondicionServices.PostCondicion(condicion);
        } 
        else
        {
            await CondicionServices.PutCondicion(condicion.IdCondicion, condicion);
        }
    }

    async Task DeleteCondicion()
    {
        await CondicionServices.DeleteCondicion(condicion.IdCondicion);
    }


}
