@page "/FormaPago"
@page "/FormaPago/{Id:int}"
@using BlazorCRUD.Server.Models;
@inject IFormaPagoServices FormaPagoServices
@inject NavigationManager NavigationManager

<h3>Forma de Pago</h3>
@if (Id == null)
{
    <PageTitle>Create a new Forma de pago</PageTitle>
    <h3>Create a new Forma de pago</h3>
}
else
{
    <PageTitle>Edit @formaPago.IdFormaPago </PageTitle>
    <h3>Edit @formaPago.DescFormaPago</h3>
}

<EditForm Model="formaPago" OnSubmit="HandleSubmit">

    <div>
        <label for="desc_formaPago">Descripcion de la forma de pago</label>
        <InputText id="desc_formaPago" @bind-Value="formaPago.DescFormaPago" class="form-control"></InputText>
    </div>
    <br />

    @if (Id == null)
    {
        <button type="submit" class="btn btn-primary">Save New Condicion</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Update Condicion</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteCondicion">Delete Condicion</button>
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    FormaPago formaPago = new FormaPago { };

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            formaPago = await FormaPagoServices.GetFormaPago((byte)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await FormaPagoServices.PostFormaPago(formaPago);
        }
        else
        {
            await FormaPagoServices.PutFormaPago(formaPago.IdFormaPago, formaPago);
        }
    }

    async Task DeleteCondicion()
    {
        await FormaPagoServices.DeleteFormaPago(formaPago.IdFormaPago);
    }


}
